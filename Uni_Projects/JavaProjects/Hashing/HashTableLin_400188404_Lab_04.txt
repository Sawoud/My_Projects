/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.lab2_4;

/**
 *
 * @author Sawoud
 */
public class HashTableLin {
    private int [] table; // this table stores the entries
    private int flag; // flag is the number of elements inserted into the table
    private int size; // this is the size of the table
    private double load; // this is the required load
    private double actual_load; // this is the actual load
    
    public HashTableLin(int maxNum, double load)
    {// this constructor declares an empty table
        int size = (int)(maxNum/load);
        if (isPrime(size) == false){size = findPrime(size);}// this function finds a prime number size
        table = new int[size];
        flag = 0; //0 since no elements in array
        this.size = size;
        this.load = load;
        actual_load = 0;
    }

public int insert (int n){
int probe = 0;//this is used every time a variable needs to be probed
if (isIn(n) == false){ // 
if((flag == size) || actual_load >= load){rehash();} // if the array is full, or the actual load is greater than the wanted load the array gets rehashed
int h = (n % table.length) ;
if(table[h] == 0){table[h] = n; flag++;probe++;
actual_load = (flag+.1)/size;}
    else{
    int i = 0;
        while (true){ // this loop keeps going until an empty spot is found
        if(table[(h+i)%table.length] == 0){table[(h+i)%table.length] = n;flag++;probe++;
        actual_load = (flag+.1)/size;break;}
        else{i++;probe++;}
        }
    }
}
return probe;
}
public void callrehash(){this.rehash();}

private void rehash(){
int [] temp = new int [table.length]; //temp gets the values in the has array
temp = table;
this.size = findPrime(table.length*2); // an prime which is atleast double the size is found
table = new int [this.size];
actual_load = 0; // the actual load gets reset to 0
for(int i = 0; i<temp.length; i++){ // all the values get inserted back
insert(temp[i]);
}
}

public boolean isIn(int n){ // uses linear probing to determine if number is present
boolean check = false;
int h = n%table.length;
if(table[h] == n){check = true;}
else{
for(int i = 1; i < table.length; i++){
if(table[(h+i)%table.length] == n){check = true; break;}
}
}
return check;
}

public void printKeys(){ //these two functions print the keys along with the indexes
    System.out.println("\nKeys");
    for(int i = 0; i < table.length; i++){System.out.println(table[i]);}
}

public void printKeysAndIndexes(){
       System.out.println("\nIndex\tKeys");
    for(int i = 0; i < table.length; i++){System.out.println(i+"\t"+table[i]);}
}


public boolean isPrime(int x){ // this function checks if a number is a prime
    boolean check = true;
    for(int i = 2; i < x/2; i++ ){
    if(x%i == 0){check = false;}
    }
    return check;
}

    public  int findPrime(int x){ // this function gives out primes
    
    int prime = 1;
    int i = 0;
    int temp = 0;
    while (true){
        temp = x + i;
        if(isPrime(temp) == true){prime = temp;break;}
        i++;
        
    }
        return prime;
}

    public int[] getTable(){return table;}  //these functions return the class values
    public int getFlag(){return flag;}  
    public int getSize(){return size;}  
    public double getLoad(){return load;}  
    public double getALoad(){return actual_load;}  

    
}

